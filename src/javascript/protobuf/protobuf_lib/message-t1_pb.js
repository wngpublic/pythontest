// source: message-t1.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Test1', null, global);
goog.exportSymbol('proto.Test1.InnerTest1', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Test1 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Test1.repeatedFields_, null);
};
goog.inherits(proto.Test1, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Test1.displayName = 'proto.Test1';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Test1.InnerTest1 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Test1.InnerTest1.repeatedFields_, null);
};
goog.inherits(proto.Test1.InnerTest1, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Test1.InnerTest1.displayName = 'proto.Test1.InnerTest1';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Test1.repeatedFields_ = [2,5,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Test1.prototype.toObject = function(opt_includeInstance) {
  return proto.Test1.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Test1} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Test1.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    rivalList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    sval1: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    ival2: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    rsvalList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    innert1: (f = msg.getInnert1()) && proto.Test1.InnerTest1.toObject(includeInstance, f),
    innert2: (f = msg.getInnert2()) && proto.Test1.InnerTest1.toObject(includeInstance, f),
    rinnertList: jspb.Message.toObjectList(msg.getRinnertList(),
    proto.Test1.InnerTest1.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Test1}
 */
proto.Test1.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Test1;
  return proto.Test1.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Test1} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Test1}
 */
proto.Test1.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addRival(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSval1(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIval2(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addRsval(value);
      break;
    case 6:
      var value = new proto.Test1.InnerTest1;
      reader.readMessage(value,proto.Test1.InnerTest1.deserializeBinaryFromReader);
      msg.setInnert1(value);
      break;
    case 7:
      var value = new proto.Test1.InnerTest1;
      reader.readMessage(value,proto.Test1.InnerTest1.deserializeBinaryFromReader);
      msg.setInnert2(value);
      break;
    case 8:
      var value = new proto.Test1.InnerTest1;
      reader.readMessage(value,proto.Test1.InnerTest1.deserializeBinaryFromReader);
      msg.addRinnert(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Test1.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Test1.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Test1} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Test1.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRivalList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getRsvalList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getInnert1();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Test1.InnerTest1.serializeBinaryToWriter
    );
  }
  f = message.getInnert2();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Test1.InnerTest1.serializeBinaryToWriter
    );
  }
  f = message.getRinnertList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.Test1.InnerTest1.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Test1.InnerTest1.repeatedFields_ = [2,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Test1.InnerTest1.prototype.toObject = function(opt_includeInstance) {
  return proto.Test1.InnerTest1.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Test1.InnerTest1} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Test1.InnerTest1.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    rivalList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    sval1: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    ival2: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    rsvalList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Test1.InnerTest1}
 */
proto.Test1.InnerTest1.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Test1.InnerTest1;
  return proto.Test1.InnerTest1.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Test1.InnerTest1} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Test1.InnerTest1}
 */
proto.Test1.InnerTest1.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addRival(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSval1(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIval2(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addRsval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Test1.InnerTest1.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Test1.InnerTest1.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Test1.InnerTest1} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Test1.InnerTest1.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRivalList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getRsvalList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * required int32 id = 1;
 * @return {number}
 */
proto.Test1.InnerTest1.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Test1.InnerTest1} returns this
 */
proto.Test1.InnerTest1.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Test1.InnerTest1} returns this
 */
proto.Test1.InnerTest1.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Test1.InnerTest1.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int32 rival = 2;
 * @return {!Array<number>}
 */
proto.Test1.InnerTest1.prototype.getRivalList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Test1.InnerTest1} returns this
 */
proto.Test1.InnerTest1.prototype.setRivalList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Test1.InnerTest1} returns this
 */
proto.Test1.InnerTest1.prototype.addRival = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Test1.InnerTest1} returns this
 */
proto.Test1.InnerTest1.prototype.clearRivalList = function() {
  return this.setRivalList([]);
};


/**
 * optional string sval1 = 3;
 * @return {string}
 */
proto.Test1.InnerTest1.prototype.getSval1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Test1.InnerTest1} returns this
 */
proto.Test1.InnerTest1.prototype.setSval1 = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Test1.InnerTest1} returns this
 */
proto.Test1.InnerTest1.prototype.clearSval1 = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Test1.InnerTest1.prototype.hasSval1 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 ival2 = 4;
 * @return {number}
 */
proto.Test1.InnerTest1.prototype.getIval2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Test1.InnerTest1} returns this
 */
proto.Test1.InnerTest1.prototype.setIval2 = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Test1.InnerTest1} returns this
 */
proto.Test1.InnerTest1.prototype.clearIval2 = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Test1.InnerTest1.prototype.hasIval2 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string rsval = 5;
 * @return {!Array<string>}
 */
proto.Test1.InnerTest1.prototype.getRsvalList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Test1.InnerTest1} returns this
 */
proto.Test1.InnerTest1.prototype.setRsvalList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Test1.InnerTest1} returns this
 */
proto.Test1.InnerTest1.prototype.addRsval = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Test1.InnerTest1} returns this
 */
proto.Test1.InnerTest1.prototype.clearRsvalList = function() {
  return this.setRsvalList([]);
};


/**
 * required int32 id = 1;
 * @return {number}
 */
proto.Test1.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Test1} returns this
 */
proto.Test1.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Test1} returns this
 */
proto.Test1.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Test1.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int32 rival = 2;
 * @return {!Array<number>}
 */
proto.Test1.prototype.getRivalList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Test1} returns this
 */
proto.Test1.prototype.setRivalList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Test1} returns this
 */
proto.Test1.prototype.addRival = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Test1} returns this
 */
proto.Test1.prototype.clearRivalList = function() {
  return this.setRivalList([]);
};


/**
 * optional string sval1 = 3;
 * @return {string}
 */
proto.Test1.prototype.getSval1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Test1} returns this
 */
proto.Test1.prototype.setSval1 = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Test1} returns this
 */
proto.Test1.prototype.clearSval1 = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Test1.prototype.hasSval1 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 ival2 = 4;
 * @return {number}
 */
proto.Test1.prototype.getIval2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Test1} returns this
 */
proto.Test1.prototype.setIval2 = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Test1} returns this
 */
proto.Test1.prototype.clearIval2 = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Test1.prototype.hasIval2 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string rsval = 5;
 * @return {!Array<string>}
 */
proto.Test1.prototype.getRsvalList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Test1} returns this
 */
proto.Test1.prototype.setRsvalList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Test1} returns this
 */
proto.Test1.prototype.addRsval = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Test1} returns this
 */
proto.Test1.prototype.clearRsvalList = function() {
  return this.setRsvalList([]);
};


/**
 * optional InnerTest1 innert1 = 6;
 * @return {?proto.Test1.InnerTest1}
 */
proto.Test1.prototype.getInnert1 = function() {
  return /** @type{?proto.Test1.InnerTest1} */ (
    jspb.Message.getWrapperField(this, proto.Test1.InnerTest1, 6));
};


/**
 * @param {?proto.Test1.InnerTest1|undefined} value
 * @return {!proto.Test1} returns this
*/
proto.Test1.prototype.setInnert1 = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Test1} returns this
 */
proto.Test1.prototype.clearInnert1 = function() {
  return this.setInnert1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Test1.prototype.hasInnert1 = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional InnerTest1 innert2 = 7;
 * @return {?proto.Test1.InnerTest1}
 */
proto.Test1.prototype.getInnert2 = function() {
  return /** @type{?proto.Test1.InnerTest1} */ (
    jspb.Message.getWrapperField(this, proto.Test1.InnerTest1, 7));
};


/**
 * @param {?proto.Test1.InnerTest1|undefined} value
 * @return {!proto.Test1} returns this
*/
proto.Test1.prototype.setInnert2 = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Test1} returns this
 */
proto.Test1.prototype.clearInnert2 = function() {
  return this.setInnert2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Test1.prototype.hasInnert2 = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated InnerTest1 rinnert = 8;
 * @return {!Array<!proto.Test1.InnerTest1>}
 */
proto.Test1.prototype.getRinnertList = function() {
  return /** @type{!Array<!proto.Test1.InnerTest1>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Test1.InnerTest1, 8));
};


/**
 * @param {!Array<!proto.Test1.InnerTest1>} value
 * @return {!proto.Test1} returns this
*/
proto.Test1.prototype.setRinnertList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.Test1.InnerTest1=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Test1.InnerTest1}
 */
proto.Test1.prototype.addRinnert = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.Test1.InnerTest1, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Test1} returns this
 */
proto.Test1.prototype.clearRinnertList = function() {
  return this.setRinnertList([]);
};


goog.object.extend(exports, proto);
